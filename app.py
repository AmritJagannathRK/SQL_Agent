# -*- coding: utf-8 -*-
"""SQLAgent_Trail1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aJLqdTahndPcScOV7VNOM0fQGFFs6Czj
"""

import streamlit as st
import sqlite3
import pandas as pd
import re

conn = sqlite3.connect("employee.db")
cursor = conn.cursor()

def load_csv_data(csv_file):
    df = pd.read_csv(csv_file)

    columns = df.columns
    column_types = ", ".join([f'"{col}" TEXT' for col in columns])
    cursor.execute(f"CREATE TABLE IF NOT EXISTS employee ({column_types});")

    df.to_sql("employee", conn, if_exists="append", index=False)
    conn.commit()
    print("CSV data uploaded successfully!")

def execute_query(query):
    cursor.execute(query)
    rows = cursor.fetchall()
    return rows
load_csv_data("employee_data.csv")

import torch
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline, BitsAndBytesConfig
import os

model_id = "meta-llama/Llama-3.1-8B-Instruct"
access_token = "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"

bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_use_double_quant=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=torch.bfloat16
)

tokenizer = AutoTokenizer.from_pretrained(model_id, use_auth_token=access_token)
tokenizer.pad_token = tokenizer.eos_token
model = AutoModelForCausalLM.from_pretrained(
    model_id,
    device_map="auto",
    quantization_config=bnb_config,
    use_auth_token=access_token
)
text_generator = pipeline("text-generation", model=model, tokenizer=tokenizer,
                          max_new_tokens=128)

def get_response(prompt):
    response = text_generator(prompt)
    return response[0]['generated_text']

#PROMPT
def create_sql_prompt(table_name, user_query):
    """
    Create a prompt for the SQL query agent.

    Args:
        table_name (str): The name of the SQL table.
        user_query (str): The user's natural language query.

    Returns:
        str: The formatted prompt for the model.
    """
    schema = f"""
    You are an SQL query generator. Given the following SQL table schema, generate a SQL query based on the user's request.
    Table: {table_name}
    Columns:
    - EmployeeID (INTEGER): Unique ID
    - Name (TEXT): Random full name
    - Age (INTEGER): Between 22 and 60
    - Gender (TEXT): Male/Female
    - Department (TEXT): e.g., HR, IT, Sales, Finance, etc.
    - Salary (INTEGER): Random salary between $30,000 and $150,000
    - JoiningDate (DATE): Random date within the last 10 years
    - ExperienceYears (INTEGER): Between 0 and 40
    - PerformanceRating (INTEGER): Scale of 1-5
    - Resigned (TEXT): Yes/No

    User Query: "{user_query}"
    """

    return schema + "\nGenerate the SQL query:"

table_name = "employee"  # Example table name
# user_query = input("Enter your query: ")  # Get user input
user_query = "total number of female employees"
# Create SQL prompt
sql_prompt = create_sql_prompt(table_name, user_query)

# Get SQL query from the model
sql_query = get_response(sql_prompt)
print("Generated SQL Query:", sql_query)

# Query the database
print("Querying the database...")

# matches = re.findall(r'```sql\n.*\n```',sql_query)[-1].split("\n")[1]

# execute_query(matches)
final_query = re.search(r'SELECT.*', sql_query).group()

def main():
    st.title("SQL Query Generator")

    table_name = "employee"  # Example table name
    user_query = st.text_input("Enter your query:")

    if st.button("Generate SQL Query"):
        if user_query:
            # Create SQL prompt
            sql_prompt = create_sql_prompt(table_name, user_query)

            # Get SQL query from the model
            sql_query = get_response(sql_prompt)
            st.write("Generated SQL Query:", sql_query)

            # Query the database
            try:
                final_query = re.search(r'SELECT.*', sql_query).group()
                results = execute_query(final_query)

                # Display results in a table
                if results:
                    df_results = pd.DataFrame(results, columns=[column[0] for column in cursor.description])
                    st.write("Query Results:")
                    st.dataframe(df_results)
                else:
                    st.write("No results found.")
            except Exception as e:
                st.write("Sorry, try again. There was an error with the SQL query.")
                st.write(f"Error: {e}")
        else:
            st.write("Please enter a query.")

if __name__ == "__main__":
    main()